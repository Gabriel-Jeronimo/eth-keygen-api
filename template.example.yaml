AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: SAM Template for testing an SQS-triggered Lambda function

Resources:
  LambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: go1.x
      CodeUri: ./cmd/api/
      Environment:
        Variables:
          INFURA_PROJECT_ID: "YOUR VARIABLE HERE"
          FOUNDING_PRIVATE_KEY: "YOUR VARIABLE HERE"
          FOUDING_ADDRESS: "YOUR VARIABLE HERE"
          QUEUE_URL: "YOUR VARIABLE HERE"

      Handler: main
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt LambdaFunctionRole.Arn

  KeygenQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "KeygenQueue"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaSqsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: !GetAtt KeygenQueue.Arn

  LambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaFunctionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaFunctionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action: ["sqs:*"]
                Resource: "*"

  LambdaFunctionEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt KeygenQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

  Api:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "eth-keygen-api"
        paths:
          /send-message: # The path for sending messages to SQS
            post:
              x-amazon-apigateway-integration:
                type: "AWS"
                integrationHttpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path/KeygenQueue # Replace "KeygenQueue" with your SQS queue name
                requestTemplates:
                  application/json: |
                    # You can customize the request template if needed
                    {
                      "MessageBody": $input.json('$')
                    }

Outputs:
  MyLambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
